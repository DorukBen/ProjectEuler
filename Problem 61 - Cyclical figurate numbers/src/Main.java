import javax.swing.text.html.HTMLDocument;
import java.util.*;
import java.util.stream.IntStream;

/**
 * Cyclical figurate numbers
 * Problem 61
 *
 * Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are
 * generated by the following formulae:
 *
 * Triangle	 	    P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 * Square	 	    P4,n=n2	 	        1, 4, 9, 16, 25, ...
 * Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
 * Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
 * Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
 * Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
 * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
 *
 * The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last
 * number with the first).
 * Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different
 * number in the set.
 * This is the only set of 4-digit numbers with this property.
 * Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal,
 * hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
 *
 * Created by doruk on 10.06.2017.
 */

public class Main {

    private static final int DIGIT_COUNT = 4;

    private static final ArrayList<Integer> triangleNumbers = calculateTriangleNumbers();
    private static final ArrayList<Integer> squareNumbers = calculateSquareNumbers();
    private static final ArrayList<Integer> pentagonalNumbers = calculatePentagonalNumbers();
    private static final ArrayList<Integer> hexagonalNumbers = calculateHexagonalNumbers();
    private static final ArrayList<Integer> heptagonalNumbers = calculateHeptagonalNumbers();
    private static final ArrayList<Integer> octagonalNumbers = calculateOctagonalNumbers();

    private static final int[][] numbers = new int[][]{
            triangleNumbers.stream().mapToInt(Integer::intValue).toArray(),
            squareNumbers.stream().mapToInt(Integer::intValue).toArray(),
            pentagonalNumbers.stream().mapToInt(Integer::intValue).toArray(),
            hexagonalNumbers.stream().mapToInt(Integer::intValue).toArray(),
            heptagonalNumbers.stream().mapToInt(Integer::intValue).toArray(),
            octagonalNumbers.stream().mapToInt(Integer::intValue).toArray()};

    public static void main(String[] args) {

        int[] solution = new int[6];

        for (int i = 0; i < numbers[numbers.length - 1].length; i++) {
            solution[numbers.length - 1] = numbers[numbers.length - 1][i];
            if (findNext(solution, numbers.length - 1, 1)) break;
        }

        System.out.print(IntStream.of(solution).sum());
    }

    private static boolean findNext(int[] solution, int last, int length) {
        for (int i = 0; i < solution.length; i++) {
            if (solution[i] == 0) {
                for (int j = 0; j < numbers[i].length; j++) {

                    boolean unique = true;
                    for(int k = 0; k < solution.length && unique; k++){
                        if (numbers[i][j] == solution[k]) {
                            unique = false;
                        }
                    }

                    if ( unique && ((numbers[i][j] / 100) == (solution[last] % 100))) {
                        solution[i] = numbers[i][j];
                        if (length == numbers.length - 1) {
                            if (solution[numbers.length - 1] / 100 == solution[i] % 100){
                                return true;
                            }
                        }
                        if (findNext(solution, i, length + 1)){
                            return true;
                        }
                    }
                }
                solution[i] = 0;
            }
        }
        return false;
    }

    private static ArrayList<Integer> calculateTriangleNumbers(){
        ArrayList<Integer> triangleNumber = new ArrayList<>();
        int n = 1;
        while ((int)Math.log10((n * (n + 1))/ 2) < DIGIT_COUNT){
            if ((int)Math.log10((n * (n + 1))/ 2) + 1 == DIGIT_COUNT){
                triangleNumber.add((n * (n + 1))/ 2);
            }
            n++;
        }

        return triangleNumber;
    }

    private static ArrayList<Integer> calculateSquareNumbers(){
        ArrayList<Integer> squareNumber = new ArrayList<>();
        int n = 1;
        while ((int)Math.log10(n * n) < DIGIT_COUNT){
            if ((int)Math.log10(n * n) + 1 == DIGIT_COUNT){
                squareNumber.add(n * n);
            }
            n++;
        }

        return squareNumber;
    }

    private static ArrayList<Integer> calculatePentagonalNumbers(){
        ArrayList<Integer> pentagonalNumber = new ArrayList<>();
        int n = 1;
        while ((int)Math.log10((n * ((3 * n) - 1))/ 2) < DIGIT_COUNT){
            if ((int)Math.log10((n * ((3 * n) - 1))/ 2) + 1 == DIGIT_COUNT){
                pentagonalNumber.add((n * ((3 * n) - 1))/ 2);
            }
            n++;
        }

        return pentagonalNumber;
    }

    private static ArrayList<Integer> calculateHexagonalNumbers(){
        ArrayList<Integer> hexagonalNumber = new ArrayList<>();
        int n = 1;
        while ((int)Math.log10(n * ((2 * n) - 1)) < DIGIT_COUNT){
            if ((int)Math.log10(n * ((2 * n) - 1)) + 1 == DIGIT_COUNT){
                hexagonalNumber.add(n * ((2 * n) - 1));
            }
            n++;
        }

        return hexagonalNumber;
    }

    private static ArrayList<Integer> calculateHeptagonalNumbers(){
        ArrayList<Integer> heptagonalNumber = new ArrayList<>();
        int n = 1;
        while ((int)Math.log10((n * ((5 * n) - 3))/ 2) < DIGIT_COUNT){
            if ((int)Math.log10((n * ((5 * n) - 3))/ 2) + 1 == DIGIT_COUNT){
                heptagonalNumber.add((n * ((5 * n) - 3))/ 2);
            }
            n++;
        }

        return heptagonalNumber;
    }

    private static ArrayList<Integer> calculateOctagonalNumbers(){
        ArrayList<Integer> octagonalNumber = new ArrayList<>();
        int n = 1;
        while ((int)Math.log10(n * ((3 * n) - 2)) < DIGIT_COUNT){
            if ((int)Math.log10(n * ((3 * n) - 2)) + 1 == DIGIT_COUNT){
                octagonalNumber.add(n * ((3 * n) - 2));
            }
            n++;
        }

        return octagonalNumber;
    }
}
